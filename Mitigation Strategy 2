#This is another updated "Vulnerable" contract where sucessful mitigation was achieved by importing Reentrancy Guard instead of moving around the code lines.

pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/mocks/ReentrancyMock.sol";

contract Vulnerable is ReentrancyGuard {
    mapping(address => uint) public balances;

    function deposit() public payable{
        balances[msg.sender] += msg.value;
    }
    
    function withdraw() nonReentrant public {
        uint bal = balances[msg.sender];
        require( bal > 0 );
    (bool sent, ) = msg.sender.call{value: bal}("");
    require(sent, "Failed to send Ether");

        balances[msg.sender] = 0;
    }

    function getBalance() public view returns(uint){
        return address(this).balance;
    }
}
